// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package postgres

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AccountRole string

const (
	AccountRoleAdmin    AccountRole = "admin"
	AccountRoleCustomer AccountRole = "customer"
)

func (e *AccountRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountRole(s)
	case string:
		*e = AccountRole(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountRole: %T", src)
	}
	return nil
}

type NullAccountRole struct {
	AccountRole AccountRole
	Valid       bool // Valid is true if AccountRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountRole) Scan(value interface{}) error {
	if value == nil {
		ns.AccountRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountRole), nil
}

type Account struct {
	ID          uuid.UUID
	Role        AccountRole
	Email       string
	Password    string
	FullName    string
	PhoneNumber string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type Session struct {
	Token  string
	Data   []byte
	Expiry time.Time
}
