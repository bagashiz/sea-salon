// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, role, email, password, full_name, phone, created_at, updated_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Email,
			&i.Password,
			&i.FullName,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, role, email, password, full_name, phone, created_at, updated_at FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Email,
		&i.Password,
		&i.FullName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, role, email, password, full_name, phone, created_at, updated_at FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Email,
		&i.Password,
		&i.FullName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
    email,
    password,
    full_name,
    phone,
    role
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, role, email, password, full_name, phone, created_at, updated_at
`

type InsertUserParams struct {
	Email    string
	Password string
	FullName string
	Phone    string
	Role     UserRole
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Email,
		arg.Password,
		arg.FullName,
		arg.Phone,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Email,
		&i.Password,
		&i.FullName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = COALESCE($2, email),
    password = COALESCE($3, password),
    full_name = COALESCE($4, full_name),
    phone = COALESCE($5, phone),
    role = COALESCE($6, role),
    updated_at = now()
WHERE id = $1
RETURNING id, role, email, password, full_name, phone, created_at, updated_at
`

type UpdateUserParams struct {
	ID       pgtype.UUID
	Email    pgtype.Text
	Password pgtype.Text
	FullName pgtype.Text
	Phone    pgtype.Text
	Role     NullUserRole
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.FullName,
		arg.Phone,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Email,
		&i.Password,
		&i.FullName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
